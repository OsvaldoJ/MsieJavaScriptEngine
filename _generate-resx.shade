use namespace="System"
use namespace="System.Collections.Generic"
use namespace="System.IO"
use namespace="System.Linq"
use namespace="System.Text"
use namespace="System.Text.RegularExpressions"
use namespace="System.Xml.Linq"

default resxFile=''

@{
	string output = string.Empty;
	string resourceDirPath = Path.GetDirectoryName(resxFile);
	string projectDirPath = GetProjectDirectoryName(resourceDirPath);
	string outputDirPath = resourceDirPath;
	string assemblyName = GetAssemblyName(projectDirPath);
	string resourceNamespace = GenerateResourceNamespace(assemblyName, projectDirPath, resourceDirPath);
	string resourceName = Path.GetFileNameWithoutExtension(resxFile);
	bool isCultureSpecified = ResourceNameContainsCulture(resourceName);

	if (!isCultureSpecified)
	{
		var resourceStrings = new List<ResourceData>();
		XDocument xml = XDocument.Load(resxFile);

		foreach (XElement entry in xml.Descendants("data"))
		{
			string name = entry.Attribute("name").Value;
			string value = entry.Element("value").Value;

			resourceStrings.Add(
				new ResourceData 
				{
					Name = name,
					Value = value
				}
			);
		}

		var outputBuilder = new StringBuilder();
		outputBuilder.AppendFormat(
@"//------------------------------------------------------------------------------
// <auto-generated>
//	 This code was generated by a tool.
//
//	 Changes to this file may cause incorrect behavior and will be lost if
//	 the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------
namespace {0}
{{
	using System;
	using System.Globalization;
	using System.Reflection;
	using System.Resources;

	/// <summary>
	/// A strongly-typed resource class, for looking up localized strings, etc.
	/// </summary>
	public class {1}
	{{
		private static Lazy<ResourceManager> _resourceManager =
			new Lazy<ResourceManager>(() => new ResourceManager(
				""{0}.{1}"",
#if NETSTANDARD1_0 || NETSTANDARD1_1 || NETSTANDARD1_2 || NETSTANDARD1_3 || NETSTANDARD1_4 || NETSTANDARD1_5 || NETSTANDARD1_6 || NETCOREAPP1_0 || NET45 || NET451 || NET452 || NET46 || NET461 || NET462 || NET463
				typeof({1}).GetTypeInfo().Assembly
#elif NET40
				typeof({1}).Assembly
#else
#error No implementation for this target
#endif
			));

		private static CultureInfo _resourceCulture;

		/// <summary>
		/// Returns a cached ResourceManager instance used by this class
		/// </summary>
		public static ResourceManager ResourceManager
		{{
			get
			{{
				return _resourceManager.Value;
			}}
		}}

		/// <summary>
		/// Overrides a current thread's CurrentUICulture property for all
		/// resource lookups using this strongly typed resource class
		/// </summary>
		public static CultureInfo Culture
		{{
			get
			{{
				return _resourceCulture;
			}}
			set
			{{
				_resourceCulture = value;
			}}
		}}
", resourceNamespace, resourceName);

		foreach (ResourceData resourceString in resourceStrings)
		{
			outputBuilder.AppendLine();
			RenderProperty(outputBuilder, resourceString);
		}
		
		outputBuilder.Append(@"
			private static string GetString(string name)
			{
				string value = ResourceManager.GetString(name, _resourceCulture);

				return value;
			}
		}
	}");

		output = outputBuilder.ToString();
		outputBuilder.Clear();
	}

	if (!Directory.Exists(outputDirPath))
	{
		Directory.CreateDirectory(outputDirPath);
	}

	string outputFilePath = Path.Combine(outputDirPath, resourceName + ".Designer.cs");
	File.WriteAllText(outputFilePath, output);
}

functions @{
	private static Regex _whitespaceRegex = new Regex(@"\s+");
	private static Regex _cultureRegex = new Regex("[a-zA-Z]{2}-[a-zA-Z]{2}$");


	private static string RemoveFirstSlash(string path)
	{
		return path.TrimStart(Path.DirectorySeparatorChar);
	}

	private static string RemoveLastSlash(string path)
	{
		return path.TrimEnd(Path.DirectorySeparatorChar);
	}

	private static string CollapseWhitespace(string value)
	{
		return _whitespaceRegex.Replace(value, " ");
	}

	private static string CutShort(string value, int maxLength, string endSymbol = "...")
	{
		string result = value.Trim();

		if (result.Length > maxLength)
		{
			result = result.Substring(0, maxLength).Trim() + endSymbol;
		}

		return result;
	}
	
	private static string CutShortByWords(string value, int maxLength, string endSymbol = "...", bool isAfterCut = false)
	{
		string result;
		string processedValue = CollapseWhitespace(value).Trim();

		if (processedValue.Length > maxLength)
		{
			if (processedValue.IndexOf(" ", StringComparison.Ordinal) != -1)
			{
				var sb = new StringBuilder();

				string[] wordList = processedValue.Split(new [] {(char)' '},
					StringSplitOptions.RemoveEmptyEntries);

				for (int i = 0; i < wordList.Length; i++)
				{
					string word = wordList[i];

					if (!isAfterCut)
					{
						if ((sb.ToString() + " " + word).Length > maxLength)
						{
							break;
						}
					}

					if (sb.Length > 0)
					{
						sb.Append(" ");
					}
					sb.Append(word);

					if (isAfterCut)
					{
						if (sb.Length > maxLength)
						{
							break;
						}
					}
				}

				sb.Append(endSymbol);

				result = sb.ToString();
				sb.Clear();
			}
			else
			{
				result = CutShort(processedValue, maxLength, endSymbol);
			}
		}
		else
		{
			result = processedValue;
		}

		return result;
	}

	private static string XmlEncode(string value)
	{
		if (string.IsNullOrWhiteSpace(value) || !ContainsXmlEncodingChars(value))
		{
			return value;
		}

		string result;

		using (var writer = new StringWriter())
		{
			int charCount = value.Length;

			for (int charIndex = 0; charIndex < charCount; charIndex++)
			{
				char charValue = value[charIndex];

				switch (charValue)
				{
					case (char)'"':
						writer.Write("&quot;");
						break;
					case (char)'&':
						writer.Write("&amp;");
						break;
					case (char)'<':
						writer.Write("&lt;");
						break;
					case (char)'>':
						writer.Write("&gt;");
						break;
					default:
						writer.Write(charValue);
						break;
				}
			}

			writer.Flush();

			result = writer.ToString();
		}

		return result;
	}

	private static bool ContainsXmlEncodingChars(string value)
	{
		bool result = (value.IndexOf('"') != -1 || value.IndexOf('&') != -1
			|| value.IndexOf('<') != -1 || value.IndexOf('>') != -1);

		return result;
	}

	private static string GetProjectDirectoryName(string resourceDirPath)
	{
		string rootPath = RemoveLastSlash(Path.GetPathRoot(resourceDirPath));
		string projectDirPath = RemoveLastSlash(resourceDirPath);

		while (true)
		{
			if (string.Equals(projectDirPath, rootPath, StringComparison.OrdinalIgnoreCase))
			{
				throw new FileNotFoundException("Project file not exist.");
			}

			if (Directory.EnumerateFiles(projectDirPath, "*.csproj", SearchOption.TopDirectoryOnly).Any())
			{
				break;
			}

			int lastSlashIndex = projectDirPath.LastIndexOf(Path.DirectorySeparatorChar);
			if (lastSlashIndex != -1)
			{
				projectDirPath = projectDirPath.Substring(0, lastSlashIndex);
			}
		}

		return projectDirPath;
	}

	private static string GetAssemblyName(string projectDirPath)
	{
		string assemblyName = Path.GetFileName(RemoveLastSlash(projectDirPath));
		
		return assemblyName;
	}

	private static string GenerateResourceNamespace(string assemblyName, string projectDirPath, string resourceDirPath)
	{
		string resourceNamespace = assemblyName;

		if (!string.Equals(projectDirPath, resourceDirPath, StringComparison.OrdinalIgnoreCase))
		{
			string resourceNamespacePart = resourceDirPath.Substring(projectDirPath.Length);
			resourceNamespacePart = RemoveFirstSlash(resourceNamespacePart);
			resourceNamespacePart = RemoveLastSlash(resourceNamespacePart);
			resourceNamespacePart = resourceNamespacePart.Replace(Path.DirectorySeparatorChar, (char)'.');

			resourceNamespace = string.Join(".", assemblyName, resourceNamespacePart);
		}

		return resourceNamespace;
	}

	private static bool ResourceNameContainsCulture(string resourceName)
	{
		return _cultureRegex.IsMatch(resourceName);
	}

	private static void RenderProperty(StringBuilder builder, ResourceData resourceString)
	{
		builder
			.AppendLine("		/// <summary>")
			.AppendFormat("		/// Looks up a localized string similar to \"{0}\"",
				XmlEncode(CutShortByWords(resourceString.Value, 100)))
			.AppendLine()
			.AppendLine("		/// </summary>")
			.AppendFormat("		public static string {0}", resourceString.Name)
			.AppendLine()
			.AppendLine("		{")
			.AppendFormat(@"			get {{ return GetString(""{0}""); }}", resourceString.Name)
			.AppendLine()
			.AppendLine("		}")
			;
	}

	private class ResourceData
	{
		public string Name { get; set; }
		public string Value { get; set; }
	}
}